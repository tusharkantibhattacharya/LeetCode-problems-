100. Same Tree
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // Base case: if both trees are null, they are identical
        if (p == null && q == null) {
            return true;
        }
        // If only one tree is null or the values are different, they are not identical
        if (p == null || q == null || p.val != q.val) {
            return false;
        }
        // Recursively check if the left and right subtrees are identical
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}
101. Symmetric Tree
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return isMirror(root.left, root.right);
    }
    
    private boolean isMirror(TreeNode n1, TreeNode n2) {
        if (n1 == null && n2 == null) {
            return true;
        }
        
        if (n1 == null || n2 == null) {
            return false;
        }
        
        return n1.val == n2.val && isMirror(n1.left, n2.right) && isMirror(n1.right, n2.left);
    }
}
102. Binary Tree Level Order Traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> list = new ArrayList<>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null){return list;}
        solve(root,0);
        return list;
    }
    public void solve(TreeNode root, int count){
        if(count == list.size()){
            List<Integer> arr = new ArrayList<>();
            arr.add(root.val);
            list.add(new ArrayList<>(arr));
        }else{
            List<Integer> arr = list.get(count);
            arr.add(root.val);
            list.set(count, new ArrayList<>(arr));
        }
        if(root.left==null && root.right==null){
            return;
        }
        if(root.left!=null){
            solve(root.left, count+1);
        }
        if(root.right!=null){
            solve(root.right, count+1);
        }
        return;
    }
}
103. Binary Tree Zigzag Level Order Traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null)
        return new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        List<List<Integer>> ans = new ArrayList<>();
        boolean leftToRight = true;
        while(!q.isEmpty()) {
            int size = q.size();
            List<Integer> subList = new ArrayList<>();
            for(int i=0;i<size;i++) {
                TreeNode node = q.poll();
                if(node != null) {
                    if(node.left != null)
                    q.add(node.left);
                    if(node.right != null)
                    q.add(node.right);
                    subList.add(node.val);
                }
            }
            if(!leftToRight) {
                Collections.reverse(subList);
            }
            ans.add(subList);
            leftToRight = leftToRight ? false : true;
        }
        return ans;
    }
}
104. Maximum Depth of Binary Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        //base condition return 0 is null
        if(root==null){
            return 0;
        }
        //else return the 1+max(left, right)
        //recursion function
        //return 1+ Math.max(maxDepth(root.left),maxDepth(root.right));

        //more optimized
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);

        return 1+Math.max(leftDepth,rightDepth);
    }
}
107. Binary Tree Level Order Traversal II
class Solution {
public List<List> levelOrderBottom(TreeNode root) {
List<List> result = new ArrayList<>();
if(root == null) return result;
Queue queue = new LinkedList<>();
queue.offer(root);
while(!queue.isEmpty())
{
List currentLevel = new ArrayList<>();
int levelSize = queue.size();
for(int i =0; i < levelSize; i++)
{
TreeNode currentNode = queue.poll();
currentLevel.add(currentNode.val);
if(currentNode.left != null)
queue.add(currentNode.left);
if(currentNode.right != null)
queue.add(currentNode.right);
}
result.add(0,currentLevel);
}
return result;

}
}
111. Minimum Depth of Binary Tree
class Solution {
    public int minDepth(TreeNode root) {
        // Base case...
        // If the subtree is empty i.e. root is NULL, return depth as 0...
        if(root == null)  return 0;
        // Initialize the depth of two subtrees...
        int leftDepth = minDepth(root.left);
        int rightDepth = minDepth(root.right);
        // If the both subtrees are empty...
        if(root.left == null && root.right == null)
            return 1;
        // If the left subtree is empty, return the depth of right subtree after adding 1 to it...
        if(root.left == null)
            return 1 + rightDepth;
        // If the right subtree is empty, return the depth of left subtree after adding 1 to it...
        if(root.right == null)
            return 1 + leftDepth;
        // When the two child function return its depth...
        // Pick the minimum out of these two subtrees and return this value after adding 1 to it...
        return Math.min(leftDepth, rightDepth) + 1;    // Adding 1 is the current node which is the parent of the two subtrees...
    }
}
126. Word Ladder II
class Solution {

    private int getCharDifference(String s1, String s2) {
        int count = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
            }
        }
        return count;
    }

    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        if (!wordList.contains(endWord)) return new ArrayList<>();
        
         if(!wordList.contains(beginWord)){
            wordList.add(beginWord);
         }

        int n = wordList.size();
        Map<String, List<String>> adj = new HashMap<>();
        
        // Build adjacency list
        for (String word : wordList) {
            adj.put(word, new ArrayList<>());
        }

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (getCharDifference(wordList.get(i), wordList.get(j)) == 1) {
                    adj.get(wordList.get(i)).add(wordList.get(j));
                    adj.get(wordList.get(j)).add(wordList.get(i));
                }
            }
        }

        List<List<String>> ansList = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        
        int shortestDistance = bfsForShortestPathCost(adj, beginWord, endWord, map);
        List<String> list = new ArrayList<>();
        list.add(endWord);
        endToStartDFS(adj, beginWord, endWord, map, list, ansList);

        return ansList;

    }

    private void endToStartDFS(Map<String, List<String>> adj, String src, String node, HashMap<String, Integer> map, List<String> list, List<List<String>> ansList){// node = start node which is destination node
        if(node.equals(src)){
            ansList.add(new ArrayList<>(list));
        }

// System.out.println(node);

        for(String neigh: adj.get(node)){
            if(map.containsKey(neigh) && map.get(neigh)<map.get(node)){
                list.add(0,neigh);
                endToStartDFS(adj, src, neigh, map, list, ansList);
                list.remove(0);
            }
        } 
    }



    private int bfsForShortestPathCost(Map<String, List<String>> adj, String src, String dest, HashMap<String, Integer> map) {
        Queue<String> queue = new LinkedList<>();
        Map<String, Integer> dist = new HashMap<>();
        
        queue.add(src);
        dist.put(src, 1);
        map.put(src, 1);

        while (!queue.isEmpty()) {
            String current = queue.poll();
            int currentDist = dist.get(current);

            if (current.equals(dest)) {
                return currentDist;
            }

            for (String neighbor : adj.get(current)) {
                if (!dist.containsKey(neighbor)) {
                    dist.put(neighbor, currentDist + 1);
                    queue.add(neighbor);
                    map.put(neighbor, currentDist + 1);
                }
            }
        }

        return 0;
    }

}