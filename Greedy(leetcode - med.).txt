2195. Append K Integers With Minimal Sum
class Solution {
    public long minimalKSum(int[] nums, int k) {
    Arrays.sort(nums);
    Set<Integer> set = new HashSet<>();
    long sum = 0;
    for (int num: nums) {
        if (!set.contains(num) && num<=k) {
            k++;
            sum += num;        
        }            
        set.add(num);
    } 
    long res = (long)(1 + k) * k / 2 - sum;
    return res;             
    }
}
2202. Maximize the Topmost Element After K Moves
class Solution {
    public int maximumTop(int[] nums, int k) {
        int n = nums.length;
        if(n==1){
            if(k%2!=0){
                return -1;
            }
            return nums[0];
        }
        int ans = -1;
        for(int i=0;i<n;i++){
            int stepsConsumed = i;
            stepsConsumed = k-stepsConsumed;
            if(stepsConsumed>=0 && stepsConsumed!=1){
                ans = Math.max(ans, nums[i]);
            }
        }
        return ans;
    }
}
2207. Maximize Number of Subsequences in a String
class Solution {
    public long maximumSubsequenceCount(String text, String pattern) {
        
        long count1 = 0 ,count2 =0;
         char fc = pattern.charAt(0);
        char sc = pattern.charAt(1);
        
        Stack<Character> st = new Stack<>();
        
        int n = text.length();
        
        String s1 = pattern.charAt(0)+text;
        String s2 = text+sc;
        
       
        
        for(int i=0;i<n+1;i++){
            
            char c = s1.charAt(i);
            
            if(c==fc)
                st.push(c);
            else if(c==sc)
                count1+=st.size();
        }
        
        st.clear();
        for(int i=0;i<n+1;i++){
            
            char c = s2.charAt(i);
            
            if(c==fc)
                st.push(c);
            
            else if(c==sc)
                count2+=st.size();
        }
        
        long ans = Math.max(count1,count2);
        long count0 = 0;
        for(int i=0; i<text.length(); i++){
            if(text.charAt(i)==pattern.charAt(0)){
                count0+=1;
            }
            
        }
        if(pattern.charAt(0)==pattern.charAt(1)){
            long a=count0;
            return a*(a+1)/2;
        }
        return ans;
    }
}
2208. Minimum Operations to Halve Array Sum
class Solution {
    public int halveArray(int[] nums) {
        PriorityQueue<Double> pq = new PriorityQueue<>(new Comparator<Double>()

        {

            public int compare(Double a, Double b) {

                return Double.compare(b, a);
            }

        });

        int minOperations = 0;

        double halfSum = 0;

        double totSum = 0;
        for (int i = 0; i < nums.length; i++) {

            pq.add((double)nums[i]);

            totSum = totSum + nums[i];
        }
      

        while (halfSum < (totSum) / 2.0) {

            double val = pq.poll();

            double y = val / 2.0;

            halfSum = halfSum + y;

            pq.add(y);

            minOperations++;

        }
        return minOperations;

    }
}
2216. Minimum Deletions to Make Array Beautiful
    public int minDeletion(int[] A) {
        int res = 0, pre = -1;
        for (int a : A) {
            if (a == pre)
                res++;
            else
                pre = pre < 0 ? a : -1;
        }
        return pre < 0 ? res : res + 1;
    }
