268. Missing Number
class Solution {
    public int missingNumber(int[] nums) {
        int numsLength = nums.length;
        // initialize the cursor
        int i = 0;

        // phase 1: sort the numbers with cyclic sort
        // move the cursor through the entire list
        while (i < numsLength) {
            int valAtI = nums[i];

            // does the value belong in the range of the list?
            // if it doesn't, we get an out of bounds error
            // when we try to access nums[valAtI] later
            boolean belongsInRange = valAtI < numsLength;

            if (belongsInRange && valAtI != nums[valAtI]) {
                int temp = nums[i];
                nums[i] = nums[valAtI];
                nums[valAtI] = temp;
            } else {
                // move the cursor to the next index
                i++;
            }
        }

        // phase 2: find the missing number
        for (int x = 0; x < numsLength; x++) {
            if (x != nums[x]) {
                return x;
            }
        }

        // if all the numbers are already present,
        // the missing number is the length of the list
        return numsLength;
    }
}
349. Intersection of Two Arrays
class Solution {
    public int[] intersection(int[] arr1, int[] arr2) {
        int n1 = arr1.length; 
        int n2 = arr2.length;

        HashSet<Integer> hp1 = new HashSet<>();
        
        for(int i=0; i<n1; i++){
            hp1.add(arr1[i]);
        }

        HashSet<Integer> hp2 = new HashSet<>();

        for(int i=0; i<n2; i++){
            if(hp1.contains(arr2[i])) hp2.add(arr2[i]);
        }

        int ans[] = new int[hp2.size()];
        int idx = 0;

        for(var a : hp2){
            ans[idx++] = a;
        }
        return ans;
    }
}
389. Find the Difference
class Solution {
    public char findTheDifference(String s, String t) {
        StringBuilder sb = new StringBuilder(s);
        int i=0;
        for(i=0;i<t.length();i++){
            for(int j=0;j<sb.length();j++){
                if(sb.charAt(j)==t.charAt(i)){
                    sb.deleteCharAt(j);
                    break;
                }
                if(j==sb.length()-1){
                    return t.charAt(i);
                }
            }
        }
        return t.charAt(i-1);
    }
}
414. Third Maximum Number
class Solution {
    public int thirdMax(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        int count=1;
        for(int i=n-1;i>0;i--)
        {
            if(nums[i]!=nums[i-1])
            {
                count++;
            }
            if(count==3)
            {
                return nums[i-1];
            }
        }
        return nums[n-1];
    }
}
506. Relative Ranks
class Solution {
    public String[] findRelativeRanks(int[] score) {
        int [] sorted=new int [score.length];
        String [] ans=new String [score.length];
        for(int i=0;i<score.length;i++){
            sorted[i]=score[i];
        }
        Arrays.sort(sorted);
        int j=1;
        for(int i=score.length-1;i>=0;i--){
            int place=score.length-binarySearch(sorted,score[i]);
            if(place==1){
                ans[i]="Gold Medal";
            }
            else if(place==2){
                ans[i]="Silver Medal";
            }
            else if(place==3){
                ans[i]="Bronze Medal";
            }
            else{
                ans[i]=String.valueOf(place);
            }
        }
        return ans;
    }

    public int binarySearch(int[] arr, int target) {
        int low = 0;
        int high = arr.length - 1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            // Check if the middle element is the target
            if (arr[mid] == target) {
                return mid; // Found the target, return its index
            } else if (arr[mid] < target) {
                // If target is greater, ignore left half
                low = mid + 1;
            } else {
                // If target is smaller, ignore right half
                high = mid - 1;
            }
        }
        
        // Target not found in the array
        return -1;
    }
}
