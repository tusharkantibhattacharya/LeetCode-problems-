1520. Maximum Number of Non-Overlapping Substrings
import java.util.*;

class Solution {
    public List<String> maxNumOfSubstrings(String s) {
        int n = s.length();
        int[] start = new int[26];
        int[] end = new int[26];
        Arrays.fill(start, -1);
        Arrays.fill(end, -1);

        // Initialize start and end for each character
        for (int i = 0; i < n; i++) {
            int idx = s.charAt(i) - 'a';
            if (start[idx] == -1) start[idx] = i;
            end[idx] = i;
        }

        // Determine the valid substrings
        List<int[]> intervals = new ArrayList<>();
        for (int i = 0; i < 26; i++) {
            if (start[i] != -1) {
                int l = start[i], r = end[i];
                for (int j = l; j <= r; j++) {
                    l = Math.min(l, start[s.charAt(j) - 'a']);
                    r = Math.max(r, end[s.charAt(j) - 'a']);
                }
                if (l == start[i]) intervals.add(new int[]{l, r});
            }
        }

        // Sort intervals by end index
        Collections.sort(intervals, (a, b) -> a[1] - b[1]);

        // Select the non-overlapping intervals with minimum total length
        List<String> result = new ArrayList<>();
        int prevEnd = -1;
        for (int[] interval : intervals) {
            if (interval[0] > prevEnd) {
                result.add(s.substring(interval[0], interval[1] + 1));
                prevEnd = interval[1];
            }
        }

        return result;
    }
}
1526. Minimum Number of Increments on Subarrays to Form a Target Array
    public int minNumberOperations(int[] A) {
        int res = A[0];
        for (int i = 1; i < A.length; ++i)
            res += Math.max(A[i] - A[i - 1], 0);
        return res;
    }
1537. Get the Maximum Score
class Solution {
    int MOD =  1_000_000_007;

    public int maxSum(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;

        long sum1 = 0, sum2 = 0;
        int i = 0, j = 0;
        while (i < len1 || j < len2) {
            if (i < len1 && (j == len2 || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < len2 && (i == len1 || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                sum2 = Math.max(sum1, sum2) + nums1[i];
                sum1 = sum2;
                i++;
                j++;
            }
        }
        return (int) (Math.max(sum1, sum2) % MOD);
    }
}
1585. Check If String Is Transformable With Substring Sort Operations
class Solution {
    public boolean isTransformable(String s, String t) {
        Map<Integer, List<Integer>> mapToStoreStringSDigitIndex = new HashMap<Integer, List<Integer>>();

        for (int index = 0; index < 10; index++) {
            mapToStoreStringSDigitIndex.put(index, new ArrayList<Integer>());
        }

        for (int index = 0; index < s.length(); index++) {
            int currDigit = s.charAt(index) - '0';
            mapToStoreStringSDigitIndex.get(currDigit).add(index);
        }

        int[] digitCountInStringTEncounteredSoFar = new int[10];

        for (int index = 0; index < t.length(); index++) {
            int currDigit = t.charAt(index) - '0';
            // checking for anagram here. S and T should have equal number of x digit.
            // S = 2341, T = 2231 => Invalid anagram
            // S = 2431, T = 4123 => Valid anagram
            if (digitCountInStringTEncounteredSoFar[currDigit] >= mapToStoreStringSDigitIndex.get(currDigit).size()) {
                return false;
            }

            // Access the curr digit position from string S, we might have x digit with multiple occurance. To store this we use 
            // "digitCountInStringTEncounteredSoFar" array.
            int currDigitPositionInStringS = mapToStoreStringSDigitIndex.get(currDigit).get(digitCountInStringTEncounteredSoFar[currDigit]);

            // Here we check whether we have a digit smaller than "currDigit" before the "currDigit".
            // S = 84523, T = 34852
            // We can't move digit 3 in String S to 0th index, because we have 2 before 3. If we sort we get 23 in the sequence.
            for (int digit = 0; digit < currDigit; digit++) {
                if (digitCountInStringTEncounteredSoFar[digit] < mapToStoreStringSDigitIndex.get(digit).size() &&
                    mapToStoreStringSDigitIndex.get(digit).get(digitCountInStringTEncounteredSoFar[digit]) < currDigitPositionInStringS) {
                    return false;
                }
            }

            digitCountInStringTEncounteredSoFar[currDigit]++;
        }

        return true;
    }
}
1606. Find Servers That Handled Most Number of Requests
class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        
        // use a tree to track available servers
        TreeSet<Integer> availableServerIdxs = new TreeSet<Integer>();
        for (int num = 0; num < k; num++) {
            availableServerIdxs.add(num);
        }
        // use a PQ to maintain the availability based on curTime + loadTime and the server index = idx%k
        Queue<int[]> runningServers = new PriorityQueue<>((a, b)->(a[0] - b[0]));
        
        int[] serverHandledReqCount = new int[k];
        
        for (int idx = 0; idx < arrival.length; idx++) {
            int newTaskCompletionTime = arrival[idx];
            
          //  peek if the server's work time is less than or equal to the next task completion time, if it is poll those servers from the running servers queue and add the index of that server to the availableServerIdxs treeSet
            while (!runningServers.isEmpty() && runningServers.peek()[0] <= newTaskCompletionTime) {
                int freedServer = runningServers.poll()[1];
                availableServerIdxs.add(freedServer);
            }
            
            if (availableServerIdxs.size() == 0) continue; // all busy
            
            // to always get the last freed server
            Integer serverIdx = availableServerIdxs.ceiling(idx % k);
            
            if (serverIdx == null) {
                serverIdx = availableServerIdxs.first();
            }
            
            serverHandledReqCount[serverIdx]++;
            availableServerIdxs.remove(serverIdx);
            
            runningServers.offer(new int[] {newTaskCompletionTime + load[idx], serverIdx});
        }
        
        int max = Arrays.stream(serverHandledReqCount).max().getAsInt();
        return IntStream.range(0, k).filter(i -> serverHandledReqCount[i] == max).boxed().collect(Collectors.toList());
        
        //return findMaxesInCounter(counter);
    }
    
    /*
    private List<Integer> findMaxesInCounter(int[] counter) {
        int max = 0;
        for (int i = 0; i < counter.length; i++) {
            max = Math.max(max, counter[i]);
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < counter.length; i++) {
            if (counter[i] == max) {
                result.add(i);
            }
        }
        return result;
    }
    */
}

















































