561. Array Partition
class Solution {
    public int arrayPairSum(int[] nums) {
        int a=0;
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i+=2)
        {
            a+=nums[i];
        }
        return a;
    }
}
605. Can Place Flowers
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        for (int i = 0; i < flowerbed.length; i++) {
            boolean left = i == 0 || flowerbed[i - 1] == 0;
            boolean right = i == flowerbed.length - 1 || flowerbed[i + 1] == 0;
            
            if (left && right && flowerbed[i] == 0) {
                flowerbed[i] = 1;
                n--;
            }
        }
        return n <= 0;        
    }
}
860. Lemonade Change
class Solution {
    public boolean lemonadeChange(int[] bills) {
        int five = 0;
        int ten =0;
        <!-- int twenty = 0; -->
        int coins=0;
        for(int i=0;i<bills.length;i++){
            if(bills[i]==5) five++;
            if(bills[i]==10) ten++;
            <!-- if(bills[i]==20) twenty++; -->
            int change = bills[i]-5;
            if(change==0) continue;
            <!-- while(change>=20 && twenty>0){
                change-=20;
                twenty--;
            } -->
             while(change>=10 && ten>0){
                change-=10;
                ten--;
            }
             while(change>=5 && five>0){
                change-=5;
                five--;
            }
            if(change!=0) return false;
        }
        return true;
    }
}
942. DI String Match
class Solution {
    public int[] diStringMatch(String s) {
        
        int[] result = new int[s.length()+1];
        int min =0;
        int max =s.length();
        int i =0;
        
        for(i = 0; i < s.length(); i++) {
           result[i] = s.charAt(i) == 'I' ? min++ : max--;
        }
        result[i] = min;
        return result;
     }
}
976. Largest Perimeter Triangle
class Solution {
    public int largestPerimeter(int[] nums) {
    Arrays.sort(nums);
    for(int i=nums.length-1;i>1;i--){
        int a = nums[i-2];
        int b = nums[i-1];
        int c = nums[i];
			int s = a + b + c;
        if(a+b>c)
		{
            return s;
        }
    }
    return 0;
    }
}
