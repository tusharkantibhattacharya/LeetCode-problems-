94. Binary Tree Inorder Traversal
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();

        inorder(root, res);
        return res;        
    }

    private void inorder(TreeNode node, List<Integer> res) {
        if (node == null) {
            return;
        }
        inorder(node.left, res);
        res.add(node.val);
        inorder(node.right, res);
    }    
}
95. Unique Binary Search Trees II
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public List<TreeNode> func(int start, int end, Map<Pair<Integer, Integer>, List<TreeNode>> dp) {
        List<TreeNode> ans = new ArrayList<>();
        if (start > end) {
            ans.add(null);
            return ans;
        }
        if (dp.containsKey(new Pair<>(start, end)))
            return dp.get(new Pair<>(start, end));

        for (int i = start; i <= end; i++) {
            List<TreeNode> left = func(start, i - 1, dp);
            List<TreeNode> right = func(i + 1, end, dp);

            for (TreeNode l : left) {
                for (TreeNode r : right) {
                    TreeNode root = new TreeNode(i, l, r);
                    ans.add(root);
                }
            }
        }

        dp.put(new Pair<>(start, end), ans);
        return ans;
    }

    public List<TreeNode> generateTrees(int n) {
        Map<Pair<Integer, Integer>, List<TreeNode>> dp = new HashMap<>();
        return func(1, n, dp);
    }
}
96. Unique Binary Search Trees
public int numTrees(int n) {
  int [] G = new int[n+1];
  G[0] = G[1] = 1;
    
  for(int i=2; i<=n; ++i) {
    for(int j=1; j<=i; ++j) {
      G[i] += G[j-1] * G[i-j];
    }
  }
  return G[n];
}
814. Binary Tree Pruning
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode pruneTree(TreeNode root) {
        if(root == null) return null;

        solve(root);
        if(root.val == 0 && root.left == null && root.right == null){
            return null;
        }else {
            return root;
        }
    }

    public boolean solve(TreeNode node){
        if(node == null) return false;

        boolean leftContains = solve(node.left);
        boolean rightContains = solve(node.right);

        if(!leftContains){
            node.left = null;
        }
        if(!rightContains){
            node.right = null;
        }

        return node.val == 1 || leftContains || rightContains;
    }
}
834. Sum of Distances in Tree
class Solution {
    int N;
    int[] ans, count;
    List<List<Integer>> gr;

    void dfs(int node, int par) {
        for (int child : gr.get(node)) {
            if (child != par) {
                dfs(child, node);
                count[node] += count[child];
                ans[node] += ans[child] + count[child];
            }
        }
    }

    void dfs2(int node, int par) {
        for (int child : gr.get(node)) {
            if (child != par) {
                ans[child] = ans[node] - count[child] + (N - count[child]);
                dfs2(child, node);
            }
        }
    }

    public int[] sumOfDistancesInTree(int n, int[][] edges) {
        N = n;
        gr = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            gr.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            gr.get(u).add(v);
            gr.get(v).add(u);
        }

        ans = new int[n];
        count = new int[n];
        Arrays.fill(count, 1);

        dfs(0, -1);
        dfs2(0, -1);

        return ans;
    }
}
863. All Nodes Distance K in Binary Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private Map<TreeNode, TreeNode> parentPointers = new HashMap<>();
    private List<Integer> atDistanceK = new ArrayList<>();

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        populateParentPointers(root);
        performBFS(target, k);
        return atDistanceK;
    }

    private void performBFS(TreeNode target, int k){
        Queue<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        Set<TreeNode> visited = new HashSet<>();
        queue.offer(new Pair(target, 0));

        while(!queue.isEmpty()) {
            Pair<TreeNode, Integer> pair = queue.remove();
            TreeNode node  = pair.getKey();
            if (visited.contains(node)) {
                continue;
            }
            visited.add(node);
            int distance = pair.getValue();
            if (distance == k) {
                atDistanceK.add(node.val);
            }
            if (node.right != null) {
                queue.offer(new Pair(node.right, distance + 1));
            }
            if (node.left != null) {
                queue.offer(new Pair(node.left, distance + 1));
            }
            if (parentPointers.get(node) != null) {
                queue.offer(new Pair(parentPointers.get(node), distance + 1));
            }
        }
    }

    private void populateParentPointers(TreeNode root) {
        if (root == null) {
            return;
        }
        if (root.left != null) {
            parentPointers.put(root.left, root);
        }
        if (root.right != null) {
            parentPointers.put(root.right, root);
        }
        populateParentPointers(root.left);
        populateParentPointers(root.right);
    }
}
865. Smallest Subtree with all the Deepest Nodes
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode subtreeWithAllDeepest(TreeNode root) {

        //we first apply bfs to find the last layer nodes and store in a list.
        // apply postorder left->right->node, so that we can find the smallest tree with all the deepest nodes
// we first have to find the deepest level

        List<Integer>s1 =new ArrayList<>();
        Queue<TreeNode>queue = new LinkedList<>();
         queue.offer(root);

         while(!queue.isEmpty()){
            List<Integer>s3 = new ArrayList<>();
            int ll = queue.size();
            for(int i=0;i<ll;i++){
                TreeNode tar = queue.poll();
                s3.add(tar.val);
                if(tar.left!=null){
                    queue.offer(tar.left);
                }
                if(tar.right!=null){
                    queue.offer(tar.right);
                }
            }
            if(queue.isEmpty()){
                for(int r=0;r<s3.size();r++){
                    s1.add(s3.get(r));
                }
            }
         }

         // now we have obtained our all the nodes in the list s1
         //applying postorder to check the smallest tree
         Queue<TreeNode>rt = new LinkedList<>();
         postorder(root,rt,s1);

         return rt.poll();
    }

    public void postorder(TreeNode root, Queue<TreeNode>s5,List<Integer>s3){
        if(root==null){
            return;
        }

        postorder(root.left,s5,s3);
        postorder(root.right,s5,s3);
        if(s5.isEmpty() && check(root,s3)){
           s5.offer(root);
        }
    }

    public boolean check(TreeNode root,List<Integer>s1){

    List<Integer>ch = new ArrayList<>();
    preorder(root,ch);
     int cc =0; 
    for(int i=0;i<s1.size();i++){
        int elm = s1.get(i);
        if(ch.contains(elm)){
            cc++;
        }
    }

    return cc==s1.size();

}

public void  preorder(TreeNode root,List<Integer>ch){
if(root==null){
    return;
}
ch.add(root.val);
preorder(root.left,ch);
preorder(root.right,ch);
}
}
872. Leaf-Similar Trees
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> list1=new ArrayList<>();
        List<Integer> list2=new ArrayList<>();
        leaf(root1,list1);
        leaf(root2,list2);
        return list1.equals(list2);
    }
    public void leaf(TreeNode root,List<Integer> list){
        if(root==null)return;
        if(root.left==null&&root.right==null){
            list.add(root.val);
            return;
        }    
        leaf(root.left,list);
        leaf(root.right,list);
    }
}

