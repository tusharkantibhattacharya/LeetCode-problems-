30. Substring with Concatenation of All Words
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> ans = new ArrayList<>();
        int n = s.length();
        int m = words.length;
        int w = words[0].length();

        HashMap<String,Integer> map = new HashMap<>();
        for(String x : words)
        map.put(x, map.getOrDefault(x,0)+1);

        for(int i=0; i<w; i++){
            HashMap<String,Integer> temp = new HashMap<>();
            int count = 0;
            for(int j=i,k=i; j+w <= n; j=j+w){
                String word = s.substring(j,j+w);
                temp.put(word,temp.getOrDefault(word,0)+1);
                count++;
                
                if(count==m){
                    if(map.equals(temp)){
                        ans.add(k);
                    }
                    String remove = s.substring(k,k+w);
                    temp.computeIfPresent(remove, (a, b) -> (b > 1) ? b - 1 : null);
                    count--;
                    k=k+w;
                }
            }//inner for loop
        }//outer for loop
        return ans;
    }//method
}//class

//................................................................
37. Sudoku Solver
class Solution {
    boolean[][] visited = new boolean[10][60]; // 9 rows and values are till 58, so round figure 60
    boolean[][] rows = new boolean[10][60];
    boolean[][] cols = new boolean[10][60];
    int dots = 0;
    public void solveSudoku(char[][] board) {
        for(int r = 0; r < 9; r++) {
            for(int c = 0; c < 9; c++) {
                if(board[r][c] != '.') {

                    rows[r][board[r][c]] = true;
                    cols[c][board[r][c]] = true;
                    
                    int box = (r / 3) * 3 + (c / 3) + 1;
                    visited[box][board[r][c]] = true;
                }
                else dots++;
            }
        }
        backtrack(board);
    }
    boolean backtrack(char[][] board) {
        for(int r = 0; r < 9; r++) {
            for(int c = 0; c < 9; c++) {
                if(board[r][c] != '.') continue;
                
                for(char val = '1'; val <= '9'; val++) {
                    if(valid(board, r, c, val)) {
                        board[r][c] = val;
                        rows[r][val] = true;
                        cols[c][val] = true;
                        int box = (r / 3) * 3 + (c / 3) + 1;
                        visited[box][val] = true;
                        dots--;
                        if(dots == 0) return true;

                        if(backtrack(board)) return true;

                        visited[box][val] = false;
                        rows[r][val] = false;
                        cols[c][val] = false;
                        board[r][c] = '.';
                        dots++;
                    }
                }
                return false;
            }
        }
        return true; // we can also return false here, doesn't matter
    }
    boolean valid(char[][] board, int row, int col, char val) {
        if(rows[row][val] == true) return false;
        if(cols[col][val] == true) return false;
        int box = (row / 3) * 3 + (col / 3) + 1;
        if(visited[box][val] == true) return false;
        return true;
    }
}
41. First Missing Positive
class Solution {
    public int firstMissingPositive(int[] nums) {
        int[] filteredNums = Arrays.stream(nums).filter(n -> n > 0).toArray();
        
        Arrays.sort(filteredNums);
        
        int target = 1;
        for (int n : filteredNums) {
            if (n == target) {
                target++;
            } else if (n > target) {
                return target;
            }
        }
        
        return target;        
    }
}
76. Minimum Window Substring
class Solution {
    public String minWindow(String s, String t) {
        if (s.length() < t.length()) {
            return "";
        }

        Map<Character, Integer> charCount = new HashMap<>();
        for (char ch : t.toCharArray()) {
            charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);
        }

        int targetCharsRemaining = t.length();
        int[] minWindow = {0, Integer.MAX_VALUE};
        int startIndex = 0;

        for (int endIndex = 0; endIndex < s.length(); endIndex++) {
            char ch = s.charAt(endIndex);
            if (charCount.containsKey(ch) && charCount.get(ch) > 0) {
                targetCharsRemaining--;
            }
            charCount.put(ch, charCount.getOrDefault(ch, 0) - 1);

            if (targetCharsRemaining == 0) {
                while (true) {
                    char charAtStart = s.charAt(startIndex);
                    if (charCount.containsKey(charAtStart) && charCount.get(charAtStart) == 0) {
                        break;
                    }
                    charCount.put(charAtStart, charCount.getOrDefault(charAtStart, 0) + 1);
                    startIndex++;
                }

                if (endIndex - startIndex < minWindow[1] - minWindow[0]) {
                    minWindow[0] = startIndex;
                    minWindow[1] = endIndex;
                }

                charCount.put(s.charAt(startIndex), charCount.getOrDefault(s.charAt(startIndex), 0) + 1);
                targetCharsRemaining++;
                startIndex++;
            }
        }

        return minWindow[1] >= s.length() ? "" : s.substring(minWindow[0], minWindow[1] + 1);        
    }
}
126. Word Ladder II
class Solution {

    private int getCharDifference(String s1, String s2) {
        int count = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
            }
        }
        return count;
    }

    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        if (!wordList.contains(endWord)) return new ArrayList<>();
        
         if(!wordList.contains(beginWord)){
            wordList.add(beginWord);
         }

        int n = wordList.size();
        Map<String, List<String>> adj = new HashMap<>();
        
        // Build adjacency list
        for (String word : wordList) {
            adj.put(word, new ArrayList<>());
        }

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (getCharDifference(wordList.get(i), wordList.get(j)) == 1) {
                    adj.get(wordList.get(i)).add(wordList.get(j));
                    adj.get(wordList.get(j)).add(wordList.get(i));
                }
            }
        }

        List<List<String>> ansList = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        
        int shortestDistance = bfsForShortestPathCost(adj, beginWord, endWord, map);
        List<String> list = new ArrayList<>();
        list.add(endWord);
        endToStartDFS(adj, beginWord, endWord, map, list, ansList);

        return ansList;

    }

    private void endToStartDFS(Map<String, List<String>> adj, String src, String node, HashMap<String, Integer> map, List<String> list, List<List<String>> ansList){// node = start node which is destination node
        if(node.equals(src)){
            ansList.add(new ArrayList<>(list));
        }

// System.out.println(node);

        for(String neigh: adj.get(node)){
            if(map.containsKey(neigh) && map.get(neigh)<map.get(node)){
                list.add(0,neigh);
                endToStartDFS(adj, src, neigh, map, list, ansList);
                list.remove(0);
            }
        } 
    }



    private int bfsForShortestPathCost(Map<String, List<String>> adj, String src, String dest, HashMap<String, Integer> map) {
        Queue<String> queue = new LinkedList<>();
        Map<String, Integer> dist = new HashMap<>();
        
        queue.add(src);
        dist.put(src, 1);
        map.put(src, 1);

        while (!queue.isEmpty()) {
            String current = queue.poll();
            int currentDist = dist.get(current);

            if (current.equals(dest)) {
                return currentDist;
            }

            for (String neighbor : adj.get(current)) {
                if (!dist.containsKey(neighbor)) {
                    dist.put(neighbor, currentDist + 1);
                    queue.add(neighbor);
                    map.put(neighbor, currentDist + 1);
                }
            }
        }

        return 0;
    }

}