9. Palindrome Number
class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;
        }

        long reversed = 0;
        long temp = x;

        while (temp != 0) {
            int digit = (int) (temp % 10);
            reversed = reversed * 10 + digit;
            temp /= 10;
        }

        return (reversed == x);
    }
}
1518. Water Bottles
class Solution {
    public int numWaterBottles(int numBottles, int numExchange) {
        return numBottles+((numBottles-1)/(numExchange-1));
    }
}
1523. Count Odd Numbers in an Interval Range
class Solution {
    public int countOdds(int l, int h) {
        int r = h-l;
        if(r % 2 ==0 && h % 2 == 1) {
            return r / 2 + 1;
        }else if(r % 2 == 1) {
            return r/2+1;
        }else {
            return r/2;
        }
    }
}
1588. Sum of All Odd Length Subarrays
class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum = 0, n = arr.length;
        for (int i = 0; i < n; i++) {
            int start = n - i;
            int end = i + 1;
            int totalPossibleSubArrs = start * end;
            int oddSubs = totalPossibleSubArrs / 2;
            if (totalPossibleSubArrs % 2 != 0) {
                oddSubs++;
            }
            sum += oddSubs * arr[i];
        }
        return sum;
    }
}
1688. Count of Matches in Tournament
class Solution {
    public int numberOfMatches(int n) {
        int matches = 0;
        while(n != 1) {
            if((n&1) == 0) {
                matches += n / 2;
                n /= 2;
            }
            else {
                matches += (n - 1) / 2;
                n = (n - 1) / 2 + 1;
            }
        }

        return matches;
    }
}

