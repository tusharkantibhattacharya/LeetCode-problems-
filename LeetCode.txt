2. Add Two Numbers
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode tail = dummyHead;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0) {
            int digit1 = (l1 != null) ? l1.val : 0;
            int digit2 = (l2 != null) ? l2.val : 0;

            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;

            ListNode newNode = new ListNode(digit);
            tail.next = newNode;
            tail = tail.next;

            l1 = (l1 != null) ? l1.next : null;
            l2 = (l2 != null) ? l2.next : null;
        }

        ListNode result = dummyHead.next;
        dummyHead.next = null;
        return result;
    }
}
3. Longest Substring Without Repeating Characters
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int maxLength = 0;
        Set<Character> charSet = new HashSet<>();
        int left = 0;
        
        for (int right = 0; right < n; right++) {
            if (!charSet.contains(s.charAt(right))) {
                charSet.add(s.charAt(right));
                maxLength = Math.max(maxLength, right - left + 1);
            } else {
                while (charSet.contains(s.charAt(right))) {
                    charSet.remove(s.charAt(left));
                    left++;
                }
                charSet.add(s.charAt(right));
            }
        }
        
        return maxLength;
    }
}
5. Longest Palindromic Substring
public class Solution {
    public String longestPalindrome(String s) {
        if (s.length() <= 1) {
            return s;
        }

        int maxLen = 1;
        String maxStr = s.substring(0, 1);

        for (int i = 0; i < s.length(); i++) {
            for (int j = i + maxLen; j <= s.length(); j++) {
                if (j - i > maxLen && isPalindrome(s.substring(i, j))) {
                    maxLen = j - i;
                    maxStr = s.substring(i, j);
                }
            }
        }

        return maxStr;
    }

    private boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;

        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
}
6. Zigzag Conversion
class Solution {
    public String convert(String s, int numRows) {
       if (numRows == 1 || numRows >= s.length()) {
            return s;
        }

        int idx = 0, d = 1;
        List<Character>[] rows = new ArrayList[numRows];
        for (int i = 0; i < numRows; i++) {
            rows[i] = new ArrayList<>();
        }

        for (char c : s.toCharArray()) {
            rows[idx].add(c);
            if (idx == 0) {
                d = 1;
            } else if (idx == numRows - 1) {
                d = -1;
            }
            idx += d;
        }

        StringBuilder result = new StringBuilder();
        for (List<Character> row : rows) {
            for (char c : row) {
                result.append(c);
            }
        }

        return result.toString();        
    }
}
7. Reverse Integer
class Solution {
    public int reverse(int x) {
        int res = 0;
        boolean isNegative = x < 0;
        String strX = String.valueOf(Math.abs(x));
        StringBuilder sb = new StringBuilder(strX).reverse();
        
        try {
            res = Integer.parseInt(sb.toString());
        } catch (NumberFormatException e) {
            return 0;
        }
        
        return isNegative ? -res : res;       
    }
}
8. String to Integer (atoi)
class Solution {
  public int myAtoi(String str) {
    
    final int len = str.length();
    
    if (len == 0){
        return 0;
    }
    
    int index = 0;
    
    // skipping white spaces
    while (index < len && str.charAt(index) == ' '){
        ++index;
    }
    
    boolean isNegative = false;
    
    // to handle sign cases
    if (index < len) {
      
      if (str.charAt(index) == '-') {
        isNegative = true;
        ++index;
      } else if (str.charAt(index) == '+'){
          ++index;
      }
      
    }
    
    int result = 0;
    
    // converting digit(in character form) to integer form
    // iterate until non-digit character is not found or we can say iterate till found character is a digit
    while (index < len && isDigit(str.charAt(index))) {
      
      /* str.charAt(index) - '0' is to convert the char digit into int digit eg: '5' - '0' --> 5
      or else it will store the ASCII value of 5 i.e. 53,
      so we do 53(ASCII of 5) - 48(ASCII of 0(zero)) to get 5 as int*/
      int digit = str.charAt(index) - '0';
      
      // to avoid integer overflow
      if (result > (Integer.MAX_VALUE / 10) || (result == (Integer.MAX_VALUE / 10) && digit > 7)){
          return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;
      }
      
      // adding digits at their desired place-value
      result = (result * 10) + digit;
      
      ++index;
    }
      
    return isNegative ? -result : result;
  }
  
  private boolean isDigit(char ch) {
    return ch >= '0' && ch <= '9';
  }
}
11. Container With Most Water
class Solution {
    public int maxArea(int[] height) {
        int maxArea = 0;
        int left = 0;
        int right = height.length - 1;

        while (left < right) {
            maxArea = Math.max(maxArea, (right - left) * Math.min(height[left], height[right]));

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;        
    }
}
12. Integer to Roman
class Solution {
    public String intToRoman(int num) {
        int[] n = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] s = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        int i =0;
        String str = new String(); 
        while (num>0){
            if (num>=n[i]){
                str=str+s[i];
                num-=n[i];
            } else{
                i++;
            }
        }
        return str;
    }
}
15. 3Sum
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);

        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i-1]) {
                continue;
            }
            
            int j = i + 1;
            int k = nums.length - 1;

            while (j < k) {
                int total = nums[i] + nums[j] + nums[k];

                if (total > 0) {
                    k--;
                } else if (total < 0) {
                    j++;
                } else {
                    res.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;

                    while (nums[j] == nums[j-1] && j < k) {
                        j++;
                    }
                }
            }
        }
        return res;        
    }
}
3301. Maximize the Total Height of Unique Towers
class Solution{
    public long maximumTotalSum(int[] maximumHeight){
        int n = maximumHeight.length;
        
//         Sorting an array
        Arrays.sort(maximumHeight);
        
        long curr = maximumHeight[n-1];
        long res = 0;
        for(int i=n-1; i>=0; i--){
            curr = Math.min(curr, maximumHeight[i]);
            if(curr <= 0){
                return -1;
            }
            
            res+=curr--;
        }
        return res;
    }
}
3302. Find the Lexicographically Smallest Valid Sequence
class Solution {

  int n;
  int m;
  int[] covers;

  public int[] validSequence(String word1, String word2) {
    n = word1.length();
    m = word2.length();
    covers = new int[n];
    int j = m - 1;
    for (int i = n - 1; i >= 0; i--) {
      if (j >= 0 && word1.charAt(i) == word2.charAt(j)) {
        covers[i] = i == n - 1 ? 1 : covers[i + 1] + 1;
        j--;
      } else {
        covers[i] = i == n - 1 ? 0 : covers[i + 1];
      }
    }
    j = 0;
    List<Integer> result = new ArrayList<>();
    int victory = -1;
    for (int i = 0; i < n; i++) {
      if (word1.charAt(i) == word2.charAt(j)) {
        result.add(i);
        j++;
        if (j == m) {
          break;
        }
      } else {
        if ((i == n - 1 ? 0 : covers[i + 1]) >= m - j - 1) {
          result.add(i);
          j++;
          victory = i + 1;
          break;
        }
      }
    }
    if (result.size() == m) {
      return result.stream().mapToInt(Integer::intValue).toArray();
    }
    if (victory == -1) {
      return new int[0];
    }
    for (int i = victory; i < n; i++) {
      if (word1.charAt(i) == word2.charAt(j)) {
        result.add(i);
        j++;
      }
      if (j == m) {
        break;
      }
    }
    return result.size() == m ? result.stream().mapToInt(Integer::intValue).toArray() : new int[0];
  }
}
3303. Find the Occurrence of First Almost Equal Substring
    public int minStartingIndex(String s, String pattern) {
        int n = s.length(), m = pattern.length();
        int[] z1 = z_function(pattern + s);
        int[] z2 = z_function(new StringBuilder(s + pattern).reverse().toString());
        for (int i = 0; i <= n - m; ++i)
            if (z1[m + i] + 1 + z2[n - i] >= m)
                return i;
        return -1;
    }
3304. Find the K-th Character in String Game I
    public char kthCharacter(int k) {
        return (char)('a' + Integer.bitCount(k - 1));
    }
3305. Count of Substrings Containing Every Vowel and K Consonants I
class Solution {
    String str = "aeiou";
    public int countOfSubstrings(String word, int k) {
        int n = word.length();
        
        int res = 0;
        for(int i = 0; i < n; i++){
//             vowel count
            Set<Character> set = new HashSet<>();
            int consonant = 0;
            for(int j = i; j < n; j++){
                char ch = word.charAt(j);
                if(str.indexOf(ch) != -1){
                    set.add(ch);
                }else{
                    consonant++;
                }
                
                
                if(consonant > k){
                    break;
                }
                if(set.size() == 5 && consonant == k){
                    res++;
                }
            }
        }
        return res;
    }
}
3306. Count of Substrings Containing Every Vowel and K Consonants II
class Solution {
    public long countOfSubstrings(String word, int k) {
        List<Integer> constant = new ArrayList<>();
        long answer = 0;

        // Collect the indices of consonants
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') continue;
            else constant.add(i);
        }

        // If k == 0, special case
        if (k == 0) {
            int[] arr = new int[5];
            int end = 0;
            int start = 0;

            while (end < word.length()) {
                char c = word.charAt(end);

                if (c == 'a') arr[0]++;
                else if (c == 'e') arr[1]++;
                else if (c == 'i') arr[2]++;
                else if (c == 'o') arr[3]++;
                else if (c == 'u') arr[4]++;
                else {
                    arr = new int[5];
                    start = end + 1;
                }

                while (arr[0] > 0 && arr[1] > 0 && arr[2] > 0 && arr[3] > 0 && arr[4] > 0) {
                    if (constant.size() == 0 || constant.get(constant.size() - 1) <= end) {
                        answer += (long) (word.length() - end);
                    } else {
                        int s = 0;
                        int e = constant.size() - 1;
                        while (s <= e) {
                            int mid = s + (e - s) / 2;
                            if (constant.get(mid) < end) s = mid + 1;
                            else e = mid - 1;
                        }
                        answer += (long) (constant.get(s) - end);
                    }

                    c = word.charAt(start);
                    if (c == 'a') arr[0]--;
                    else if (c == 'e') arr[1]--;
                    else if (c == 'i') arr[2]--;
                    else if (c == 'o') arr[3]--;
                    else if (c == 'u') arr[4]--;
                    start++;
                }
                end++;
            }

            return answer;
        }

        // Case when k > 0
        int[] arr = new int[6];
        int start = 0;
        int end = 0;
        int index = -1;

        while (end < word.length()) {
            char c = word.charAt(end);

            if (c == 'a') arr[0]++;
            else if (c == 'e') arr[1]++;
            else if (c == 'i') arr[2]++;
            else if (c == 'o') arr[3]++;
            else if (c == 'u') arr[4]++;
            else {
                arr[5]++;
                index = end;
            }

            while (arr[5] > k && start < word.length()) {
                c = word.charAt(start);
                if (c == 'a') arr[0]--;
                else if (c == 'e') arr[1]--;
                else if (c == 'i') arr[2]--;
                else if (c == 'o') arr[3]--;
                else if (c == 'u') arr[4]--;
                else arr[5]--;
                start++;
            }

            if (arr[0] > 0 && arr[1] > 0 && arr[2] > 0 && arr[3] > 0 && arr[4] > 0 && arr[5] == k) {
                int ind = Collections.binarySearch(constant, index);
                if (ind == constant.size() - 1) {
                    answer += word.length() - end;
                } else {
                    answer += (long) (constant.get(ind + 1) - end);
                }

                while (arr[0] > 0 && arr[1] > 0 && arr[2] > 0 && arr[3] > 0 && arr[4] > 0 && arr[5] == k && start < word.length()) {
                    c = word.charAt(start);
                    if (c == 'a') arr[0]--;
                    else if (c == 'e') arr[1]--;
                    else if (c == 'i') arr[2]--;
                    else if (c == 'o') arr[3]--;
                    else if (c == 'u') arr[4]--;
                    else arr[5]--;

                    if (arr[0] > 0 && arr[1] > 0 && arr[2] > 0 && arr[3] > 0 && arr[4] > 0 && arr[5] == k) {
                        if (ind == constant.size() - 1) {
                            answer += word.length() - end;
                        } else {
                            answer += (long) (constant.get(ind + 1) - end);
                        }
                    }
                    start++;
                }
            }
            end++;
        }

        return answer;
    }
}
3307. Find the K-th Character in String Game II
    public char kthCharacter(long k, int[] A) {
        int res = 0, n = A.length;
        k -= 1;
        for (int i = 0; i < n && i < 60; ++i)
            if ((k >> i) % 2 > 0)
                res += A[i];
        return (char)('a' + res % 26);
    }
3309. Maximum Possible Number by Binary Concatenation
class Solution {
    public int maxGoodNumber(int[] nums) {
        Integer[] integerNums = Arrays.stream(nums).boxed().toArray(Integer[]::new);

        Arrays.sort(integerNums, (a, b) -> {
            String binA = Integer.toBinaryString(a);
            String binB = Integer.toBinaryString(b);
            return (binB + binA).compareTo(binA + binB);
        });
        
        StringBuilder binaryConcatenation = new StringBuilder();

        for (int num : integerNums) {
            binaryConcatenation.append(Integer.toBinaryString(num));
        }
        
        return Integer.parseInt(binaryConcatenation.toString(), 2);
    }
}
