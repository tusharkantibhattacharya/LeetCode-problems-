537. Complex Number Multiplication
class Solution {
    public String complexNumberMultiply(String num1, String num2) {
        int p1 = num1.indexOf('+');
        int p2 = num2.indexOf('+');

        int r1 = Integer.parseInt(num1.substring(0, p1));
        int i1 = Integer.parseInt(num1.substring(p1+1, num1.length()-1));
        int r2 = Integer.parseInt(num2.substring(0, p2));
        int i2 = Integer.parseInt(num2.substring(p2+1, num2.length()-1));
        
        int real = r1*r2 - i1*i2;
        int imaginary = r1*i2 + i1*r2;
        StringBuilder ans = new StringBuilder();
        ans.append(real);
        ans.append('+');
        ans.append(imaginary);
        ans.append('i');
        return ans.toString();
    }
}
539. Minimum Time Difference
class Solution {
    public int findMinDifference(List<String> timePoints) {
        // Step 1: Convert all time points to minutes and store in a list
        List<Integer> vec = new ArrayList<>();
        for (String timePoint : timePoints) {
            int h = Integer.parseInt(timePoint.substring(0, 2));
            int m = Integer.parseInt(timePoint.substring(3));
            int mins = h * 60 + m;
            vec.add(mins);
        }
        
        // Step 2: Sort the time points
        Collections.sort(vec);
        
        // Step 3: Calculate the minimum difference
        int res = Integer.MAX_VALUE;
        for (int i = 1; i < vec.size(); i++) {
            res = Math.min(vec.get(i) - vec.get(i - 1), res);
        }
        
        // Step 4: Handle the circular case (difference between the first and last time points)
        return Math.min(res, 1440 + vec.get(0) - vec.get(vec.size() - 1));
    }
}
553. Optimal Division
		String s="";
        int n=nums.length;
		
        if(n==1){
            return s+nums[0];
        }
        else if(n==2){
            s=s+nums[0]+ "/" +nums[1];
            return s;
        }
		
        for(int i=0;i<n;i++){
            if(i==0){
                s=s+nums[i];
                s=s+"/";
                s=s+"(";
            }
            else if(i==(n-1)){
                s=s+nums[i];
            }
            else{
                s=s+nums[i];
                s=s+"/";
            }
        }
        s=s+")";
        return s;
556. Next Greater Element III
/**
 * 
 * 12344444111
 * 12411144443
 * 
 * 12344444233
 * 
 * 1. First find the point to replace
 * - check from end and first slope going down
 * 12344444111 - find '3'
 * 2. Where to put it ?
 * Find going up slope from end
 * 12444443111
 * 
 * - reverse the part
 * 121113444
 * 
 * 142387987
 * 
 * 142388779
 */

class Solution {
    public int nextGreaterElement(int n) {
        char[] nums = ("" + n).toCharArray();

        // Step 1: Find the first decreasing element from the end
        int i = nums.length - 1;
        while (i > 0 && nums[i - 1] >= nums[i]) {
            i--;
        }
        if (i == 0)
            return -1; // If no such element is found, return -1

        i--; // Point to the first element of the decreasing sequence

        // Step 2: Find the element just larger than nums[i] from the end
        int j = nums.length - 1;
        while (nums[j] <= nums[i]) {
            j--;
        }

        // Step 3: Swap elements at i and j
        swap(nums, i, j);

        // Step 4: Reverse the sequence after i to get the next smallest lexicographic
        // permutation
        reverse(nums, i + 1, nums.length - 1);

        // Convert back to long and check if it's within the 32-bit integer range
        long ansLong = Long.parseLong(new String(nums));
        return (ansLong > Integer.MAX_VALUE) ? -1 : (int) ansLong;
    }

    private void swap(char[] nums, int i, int j) {
        char temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private void reverse(char[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
}
592. Fraction Addition and Subtraction
class Solution {
    public String fractionAddition(String expression) {
        int numerator = 0, denominator = 1;
        int i = 0, n = expression.length();

        while (i < n) {
            int sign = 1;
            if (expression.charAt(i) == '+' || expression.charAt(i) == '-') {
                sign = expression.charAt(i) == '-' ? -1 : 1;
                i++;
            }

            int num = 0;
            while (i < n && Character.isDigit(expression.charAt(i))) {
                num = num * 10 + (expression.charAt(i) - '0');
                i++;
            }

            num *= sign;

            i++; // Skip the '/'
            
            int denom = 0;
            while (i < n && Character.isDigit(expression.charAt(i))) {
                denom = denom * 10 + (expression.charAt(i) - '0');
                i++;
            }

            numerator = numerator * denom + num * denominator;
            denominator *= denom;

            int gcd = gcd(Math.abs(numerator), denominator);
            numerator /= gcd;
            denominator /= gcd;
        }

        return numerator + "/" + denominator;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }

}