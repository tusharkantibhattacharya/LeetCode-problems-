10. Regular Expression Matching
enum Result {
    TRUE, FALSE
}

class Solution {
    Result[][] memo;

    public boolean isMatch(String text, String pattern) {
        memo = new Result[text.length() + 1][pattern.length() + 1];
        return dp(0, 0, text, pattern);
    }

    public boolean dp(int i, int j, String text, String pattern) {
        if (memo[i][j] != null) {
            return memo[i][j] == Result.TRUE;
        }
        boolean ans;
        if (j == pattern.length()){
            ans = i == text.length();
        } else{
            boolean first_match = (i < text.length() &&
                                   (pattern.charAt(j) == text.charAt(i) ||
                                    pattern.charAt(j) == '.'));

            if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*'){
                ans = (dp(i, j+2, text, pattern) ||
                       first_match && dp(i+1, j, text, pattern));
            } else {
                ans = first_match && dp(i+1, j+1, text, pattern);
            }
        }
        memo[i][j] = ans ? Result.TRUE : Result.FALSE;
        return ans;
    }
}
30. Substring with Concatenation of All Words
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> ans = new ArrayList<>();
        int n = s.length();
        int m = words.length;
        int w = words[0].length();

        HashMap<String,Integer> map = new HashMap<>();
        for(String x : words)
        map.put(x, map.getOrDefault(x,0)+1);

        for(int i=0; i<w; i++){
            HashMap<String,Integer> temp = new HashMap<>();
            int count = 0;
            for(int j=i,k=i; j+w <= n; j=j+w){
                String word = s.substring(j,j+w);
                temp.put(word,temp.getOrDefault(word,0)+1);
                count++;
                
                if(count==m){
                    if(map.equals(temp)){
                        ans.add(k);
                    }
                    String remove = s.substring(k,k+w);
                    temp.computeIfPresent(remove, (a, b) -> (b > 1) ? b - 1 : null);
                    count--;
                    k=k+w;
                }
            }//inner for loop
        }//outer for loop
        return ans;
    }//method
}//class

//................................................................
32. Longest Valid Parentheses
class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        int max_len = 0;

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else {
                stack.pop();
                if (stack.isEmpty()) {
                    stack.push(i);
                } else {
                    max_len = Math.max(max_len, i - stack.peek());
                }
            }
        }

        return max_len;        
    }
}
44. Wildcard Matching
// Approach -1

public class Solution {
    public boolean isMatch(String s, String p) {
        int n = p.length(); // Length of the pattern
        int m = s.length(); // Length of the text

        // Create a 2D array to store the result of subproblems
        int[][] dp = new int[n + 1][m + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        // Call the recursive helper function to perform wildcard matching
        return isMatchUtil(p, s, n - 1, m - 1, dp) == 1;
    }

    // Helper method to check if the pattern matches the text
    static int isMatchUtil(String pattern, String text, int i, int j, int[][] dp) {
        // Base Cases
        if (i < 0 && j < 0) {
            return 1; // Both strings are empty, and the pattern matches.
        }
        if (i < 0 && j >= 0) {
            return 0; // Pattern is empty, but there are characters left in text.
        }
        if (j < 0 && i >= 0) {
            // Text is empty, check if remaining characters in pattern are all '*'.
            return isAllStars(pattern, i) ? 1 : 0;
        }

        // If the result is already computed, return it.
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        // If the characters match or pattern has a '?', continue matching the rest of the strings.
        if (pattern.charAt(i) == text.charAt(j) || pattern.charAt(i) == '?') {
            return dp[i][j] = isMatchUtil(pattern, text, i - 1, j - 1, dp);
        } else {
            if (pattern.charAt(i) == '*') {
                // Two possibilities when encountering '*':
                // 1. '*' matches one or more characters in text.
                // 2. '*' matches zero characters in text.
                return dp[i][j] = (isMatchUtil(pattern, text, i - 1, j, dp) == 1 || isMatchUtil(pattern, text, i, j - 1, dp) == 1) ? 1 : 0;
            } else {
                // Characters don't match, and pattern[i] is not '*'.
                return 0;
            }
        }
    }

    // Helper method to check if the remaining characters in the pattern are all '*'
    static boolean isAllStars(String pattern, int i) {
        for (int j = 0; j <= i; j++) {
            if (pattern.charAt(j) != '*') {
                return false;
            }
        }
        return true;
    }
}
65. Valid Number
class Solution {
    public boolean isNumber(String s) {
        int i=0;
        boolean ex=false,dig=false,dot=false;
        while(i<s.length()){
            char ch=s.charAt(i);
            if(isDigit(ch)){
                dig=true;
            }else if(ch=='-' || ch=='+'){
                if(i>0 && s.charAt(i-1)!='e' && s.charAt(i-1)!='E') return false;
            }
            else if(ch=='e' || ch=='E'){
                if(ex || !dig) return false;
                ex=true;
                dig=false;
            }else if(ch=='.'){
                if(dot || ex) return false;
                dot=true;
            }else return false;
            i++;
        }
        return dig;
    }
    public boolean isDigit(char ch){
        if(ch>='0' && ch<='9') return true;
        return false;
    }
}