220. Contains Duplicate III
 public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (k < 1 || t < 0) return false;
        Map<Long, Long> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            long remappedNum = (long) nums[i] - Integer.MIN_VALUE;
            long bucket = remappedNum / ((long) t + 1);
            if (map.containsKey(bucket)
                    || (map.containsKey(bucket - 1) && remappedNum - map.get(bucket - 1) <= t)
                        || (map.containsKey(bucket + 1) && map.get(bucket + 1) - remappedNum <= t))
                            return true;
            if (map.entrySet().size() >= k) {
                long lastBucket = ((long) nums[i - k] - Integer.MIN_VALUE) / ((long) t + 1);
                map.remove(lastBucket);
            }
            map.put(bucket, remappedNum);
        }
        return false;
    }
}
295. Find Median from Data Stream
class MedianFinder {

    // Min-heap for the larger half of the numbers
    private PriorityQueue<Integer> minHeapForLargeNum;
    // Max-heap for the smaller half of the numbers
    private PriorityQueue<Integer> maxHeapForSmallNum;

    public MedianFinder() {
        // Initializing the heaps
        minHeapForLargeNum = new PriorityQueue<>();
        maxHeapForSmallNum = new PriorityQueue<>((a, b) -> b - a);
    }
    
    public void addNum(int num) {
        if (maxHeapForSmallNum.isEmpty() || maxHeapForSmallNum.peek() >= num) {
            maxHeapForSmallNum.offer(num);
        } else {
            minHeapForLargeNum.offer(num);
        }
        
        // Balance the heaps
        if (maxHeapForSmallNum.size() > minHeapForLargeNum.size() + 1) {
            minHeapForLargeNum.offer(maxHeapForSmallNum.poll());
        } else if (maxHeapForSmallNum.size() < minHeapForLargeNum.size()) {
            maxHeapForSmallNum.offer(minHeapForLargeNum.poll());
        }
    }
    
    public double findMedian() {
        if (maxHeapForSmallNum.size() == minHeapForLargeNum.size()) {
            return (maxHeapForSmallNum.peek() / 2.0) + (minHeapForLargeNum.peek() / 2.0);
        } else {
            return maxHeapForSmallNum.peek();
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
354. Russian Doll Envelopes
import java.util.Arrays;

public class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int n = envelopes.length;
        if (n == 0) return 0;

        // Sort envelopes by width. If two envelopes have the same width, sort by height in ascending order.
        Arrays.sort(envelopes, (a, b) -> {
            if (a[0] == b[0]) return a[1] - b[1]; // Sort by height if width is the same
            return a[0] - b[0]; // Sort by width otherwise
        });

        // DP array to store the maximum number of envelopes ending at each index
        int[] dp = new int[n];
        Arrays.fill(dp, 1); // Every envelope is a standalone valid sequence, so initialize to 1

        int maxEnvelopes = 1; // To store the maximum number of envelopes

        // Loop through each envelope
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                // Check if envelope[j] can fit into envelope[i]
                if (envelopes[j][0] < envelopes[i][0] && envelopes[j][1] < envelopes[i][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1); // Update dp[i] if we found a larger sequence
                }
            }
            maxEnvelopes = Math.max(maxEnvelopes, dp[i]); // Update the maximum envelopes found so far
        }

        return maxEnvelopes; // Return the maximum number of envelopes
    }
}
502. IPO
public class Solution {
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        int n = profits.length;
    int[][] projects =new int[n][2];
        for (int i = 0; i < n; i++) {
            projects[i][0] =capital[i];
            projects[i][1] =profits[i];

        }        
        Arrays.sort(projects, (a, b) -> Integer.compare(a[0], b[0]));

        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) ->Integer.compare(b, a));        
        int currentCapital = w;
        int projectIndex = 0;
        for (int i = 0; i < k; i++) {

            while (projectIndex < n && projects[projectIndex][0] <= currentCapital) {
                maxHeap.add(projects[projectIndex][1]);
                projectIndex++;
        }
            if (maxHeap.isEmpty()) {
                break;
            }
            currentCapital += maxHeap.poll();

        }
        return currentCapital;
    }
}
630. Course Schedule III
class Solution {
    public int scheduleCourse(int[][] C) {
        Arrays.sort(C, (a,b) -> a[1] - b[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> b - a);
        int total = 0;
        for (int[] course : C) {
            int dur = course[0], end = course[1];
            if (dur + total <= end) {
                total += dur;
                pq.add(dur);
            } else if (pq.size() > 0 && pq.peek() > dur) {
                total += dur - pq.poll();
                pq.add(dur);
            }
        }
        return pq.size();
    }
}