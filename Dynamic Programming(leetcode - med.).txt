376. Wiggle Subsequence
class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums.length == 0) return 0;
        
        int n = nums.length;
        if (n < 2) return n;
        
        int up = 1, down = 1;
        
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i - 1]) {
                up = down + 1;
            } else if (nums[i] < nums[i - 1]) {
                down = up + 1;
            }
        }
        
        return Math.max(up, down);
    }   
}
377. Combination Sum IV
class Solution {
    int[] t;
    public int combinationSum4(int[] nums, int target) {
        t = new int[target+1];
        Arrays.fill(t,-1);
        return solve(nums,target);
    }
    public int solve(int[] nums, int target)
    {
        if(target == 0) {
            return 1;
        }
        if(target < 0) {
            return 0;
        }
        
        if(t[target] != -1) {
            return t[target];
        }
        
        int result = 0;
        for(int i = 0; i<nums.length;i++) {
            result += solve(nums, target-nums[i]);
        }
        return t[target] = result;
    }
}
396. Rotate Function
class Solution {
    public int maxRotateFunction(int[] nums) {
        int n = nums.length;
        long F = 0, sum = 0;

        for (int i = 0; i < n; i++) {
            F += (long) nums[i] * i;
            sum += nums[i];
        }

        long maxF = F;

        for (int k = 1; k < n; k++) {
            F = F + sum - (long) n * nums[n - k];
            maxF = Math.max(maxF, F);
        }

        return (int) maxF;
    }
}
397. Integer Replacement
class Solution {
    public int integerReplacement(int n) {
        int count = 0;
        long num = n; // Use long to avoid overflow issues with large integers

        while (num != 1) {
            if ((num & 1) == 0) {
                num >>= 1;
            } else {
                if (num == 3 || ((num >> 1) & 1) == 0) {
                    num--;
                } else {
                    num++;
                }
            }
            count++;
        }
        return count;
    }
}
413. Arithmetic Slices
class Solution {
    public int numberOfArithmeticSlices(int[] nums) {

        int ans = 0;

        for(int i = 0; i < nums.length - 2; i++) {
            if(nums[i] - nums[i + 1] == nums[i + 1] - nums[i + 2]) {
                ans += task(i, i + 2, nums);
            }
        }

        return ans;
    }

    static int task(int start, int end, int[] nums) {
        if(end + 1 == nums.length) return 1;

        if(nums[end] - nums[end + 1] == nums[end - 1] - nums[end]) {
            return 1 + task(start, end + 1, nums);
        }
        else {
            return 1;
        }
    }
}
